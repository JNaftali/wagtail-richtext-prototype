type ReactComponent = (props: { [key: string]: any }) => any;

interface UnwrappedBlockConfig {
  element: string | ReactComponent;
  elementProps?: { [key: string]: any };
}

interface WrappedBlockConfig extends UnwrappedBlock {
  wrapper: string | ReactComponent;
  wrapperProps?: { [key: string]: any };
}

export type BlockConfig =
  | string
  | ReactComponent
  | UnwrappedBlockConfig
  | WrappedBlockConfig;

interface AdvancedStyleConfig {
  element: string | ReactComponent;
  props?: { [key: string]: any };
}

export type StyleConfig = string | ReactComponent | AdvancedStyleConfig;

export type EntityConfig = ReactComponent;

/**
 * Types for json generated by draft-js
 */

export interface EntityRange {
  key: number;
  offset: number;
  length: number;
}

export interface InlineStyleRange {
  offset: number;
  length: number;
  style: string;
}

export interface FullBlock {
  depth?: number;
  entityRanges?: EntityRange[];
  inlineStyleRanges?: InlineStyleRange[];
  key: string;
  text: string;
  type: string;
  data?: any;
}

export type Block = FullBlock | { text: string };

export interface Entity {
  // mutability: 'MUTABLE' | 'IMMUTABLE';
  mutability: string; // we don't use this anyway
  type: string;
  data: any;
}

export interface EntityMap {
  [key: number]: Entity;
}

export type ContentState = {
  entityMap: EntityMap;
  blocks: Block[];
};
